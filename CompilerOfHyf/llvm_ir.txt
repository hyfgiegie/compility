declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@_a = dso_local constant i32 5
@_12 = dso_local constant i32 85
@a = dso_local constant i32 8
@arrayA = dso_local constant [2 x i32] [i32 1, i32 2]
@array_b = dso_local constant [2 x [1 x i32]] [[1 x i32] [i32 1], [1 x [2 x i32]] [[2 x i32] [i32 1, i32 2]]]
@array_c = dso_local global [2 x i32] [i32 1, i32 2]
@array_d = dso_local global [2 x [1 x i32]] [[1 x i32] [i32 1], [1 x i32] [i32 2]]
@b = dso_local global i32 12
@c_1 = dso_local global i32 zeroinitializer
@d = dso_local global i32 30
define dso_local i32 @func1(i32 %var4) {
var3:
  %var5 = alloca i32
  store i32 %var4, i32* %var5
  ret i32 1
}

define dso_local void @func2() {
var6:
  ret void
}

define dso_local void @_func1() {
var7:
  %var8 = alloca i32
  store i32 10, i32* %var8
  %var9 = alloca i32
  store i32 12, i32* %var9
  %var10 = alloca [2 x [1 x i32]]
  %var11 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* %var10, i32 0, i32 0
  %var12 = getelementptr [1 x i32], [1 x i32]* %var11, i32 0, i32 0
  store i32 1, i32* %var12
  %var13 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* %var10, i32 0, i32 1
  %var14 = getelementptr [1 x i32], [1 x i32]* %var13, i32 0, i32 0
  %var15 = getelementptr [2 x i32], [2 x i32]* @array_c, i32 0, i32 1
  %var16 = load i32, i32* %var15
  store i32 %var16, i32* %var14
  %var17 = alloca i32
  %var18 = mul i32 1, 20
  %var19 = sdiv i32 %var18, 2
  %var20 = load i32, i32* %var8
  %var21 = mul i32 %var19, %var20
  %var22 = add i32 3, %var21
  store i32 %var22, i32* %var17
  %var23 = alloca i32
  store i32 121, i32* %var23
  %var24 = alloca i32
  %var25 = alloca i32
  %var26 = load i32, i32* %var8
  %var27 = load i32, i32* %var8
  %var28 = mul i32 %var26, %var27
  %var29 = load i32, i32* %var8
  %var30 = add i32 %var28, %var29
  %var31 = getelementptr [2 x i32], [2 x i32]* @arrayA, i32 0, i32 0
  %var32 = load i32, i32* %var31
  %var33 = add i32 %var30, %var32
  store i32 %var33, i32* %var25
  %var34 = load i32, i32* %var8
  call void @putch(i32 95)
  call void @putch(i32 97)
  call void @putch(i32 61)
  call void @putint(i32 %var34)
  call void @putch(i32 10)
  %var35 = load i32, i32* %var17
  call void @putch(i32 95)
  call void @putch(i32 97)
  call void @putch(i32 61)
  call void @putint(i32 %var35)
  call void @putch(i32 10)
  %var38 = load i32, i32* %var17
  %var39 = icmp eq i32 %var38, 0
  br i1 %var39, label %var36, label %var37
  br label %var36
var36:
  %var40 = load i32, i32* %var17
  %var41 = sub i32 0, 1
  %var42 = add i32 %var40, %var41
  store i32 %var42, i32* %var17
  br label %var43
  br label %var37
var37:
  store i32 1, i32* %var17
  br label %var43
var43:
  br label %var46
  br label %var46
var46:
  %var49 = load i32, i32* %var17
  %var50 = icmp slt i32 %var49, 10
  br i1 %var50, label %var48, label %var45
  br label %var48
var48:
  %var51 = load i32, i32* %var17
  %var52 = icmp sgt i32 %var51, 0
  br i1 %var52, label %var44, label %var45
  br label %var44
var44:
  %var53 = load i32, i32* %var17
  %var54 = add i32 %var53, 1
  store i32 %var54, i32* %var17
  %var58 = load i32, i32* %var17
  %var59 = icmp eq i32 %var58, 5
  br i1 %var59, label %var55, label %var57
  br label %var57
var57:
  %var67 = load i32, i32* %var17
  %var68 = icmp eq i32 %var67, 6
  br i1 %var68, label %var66, label %var56
  br label %var66
var66:
  %var69 = load i32, i32* %var17
  %var70 = mul i32 5, 1
  %var71 = sdiv i32 %var70, 5
  %var72 = mul i32 %var71, 5
  %var73 = sub i32 %var70, %var72
  %var74 = icmp ne i32 %var69, %var73
  br i1 %var74, label %var65, label %var56
  br label %var65
var65:
  %var75 = load i32, i32* %var17
  %var76 = icmp slt i32 %var75, 10
  br i1 %var76, label %var64, label %var56
  br label %var64
var64:
  %var77 = load i32, i32* %var17
  %var78 = icmp sgt i32 %var77, 5
  br i1 %var78, label %var63, label %var56
  br label %var63
var63:
  %var79 = load i32, i32* %var17
  %var80 = icmp sge i32 %var79, 5
  br i1 %var80, label %var62, label %var56
  br label %var62
var62:
  %var81 = load i32, i32* %var17
  %var82 = icmp sle i32 %var81, 6
  br i1 %var82, label %var61, label %var56
  br label %var61
var61:
  %var83 = sub i32 1, 1
  %var84 = icmp eq i32 %var83, 0
  br i1 %var84, label %var60, label %var56
  br label %var60
var60:
  %var85 = load i32, i32* %var17
  %var86 = icmp ne i32 %var85, 0
  br i1 %var86, label %var55, label %var56
  br label %var55
var55:
  br label %var45
  br label %var87
  br label %var56
var56:
  br label %var87
var87:
  %var88 = load i32, i32* %var17
  %var89 = add i32 %var88, 1
  store i32 %var89, i32* %var17
  br label %var47
  br label %var47
var47:
  br label %var46
  br label %var45
var45:
  br label %var92
  br label %var92
var92:
  %var94 = load i32, i32* %var17
  %var95 = icmp slt i32 %var94, 10
  br i1 %var95, label %var90, label %var91
  br label %var90
var90:
  %var96 = load i32, i32* %var17
  %var97 = add i32 %var96, 1
  store i32 %var97, i32* %var17
  %var100 = load i32, i32* %var17
  %var101 = icmp eq i32 %var100, 5
  br i1 %var101, label %var98, label %var99
  br label %var98
var98:
  br label %var93
  br label %var99
  br label %var99
var99:
  br label %var93
  br label %var93
var93:
  br label %var92
  br label %var91
var91:
  %var102 = load i32, i32* %var8
  %var103 = add i32 %var102, 1
  %var104 = load i32, i32* %var8
  %var105 = sdiv i32 %var104, 2
  %var106 = mul i32 %var105, 2
  %var107 = sub i32 %var104, %var106
  store i32 %var107, i32* %var23
  ret void
}

define dso_local i32 @main() {
var108:
  %var109 = alloca i32
  %var110 = call i32 @getint()
  store i32 %var110, i32* %var109
  %var111 = load i32, i32* %var109
  call void @putch(i32 119)
  call void @putch(i32 104)
  call void @putch(i32 97)
  call void @putch(i32 116)
  call void @putch(i32 32)
  call void @putch(i32 121)
  call void @putch(i32 111)
  call void @putch(i32 117)
  call void @putch(i32 32)
  call void @putch(i32 101)
  call void @putch(i32 110)
  call void @putch(i32 116)
  call void @putch(i32 101)
  call void @putch(i32 114)
  call void @putch(i32 32)
  call void @putch(i32 105)
  call void @putch(i32 110)
  call void @putch(i32 32)
  call void @putch(i32 105)
  call void @putch(i32 115)
  call void @putch(i32 58)
  call void @putint(i32 %var111)
  call void @putch(i32 10)
  %var112 = load i32, i32* @_a
  call void @putch(i32 95)
  call void @putch(i32 97)
  call void @putch(i32 61)
  call void @putint(i32 %var112)
  call void @putch(i32 10)
  %var113 = getelementptr [2 x i32], [2 x i32]* @array_c, i32 0, i32 0
  %var114 = load i32, i32* %var113
  call void @putch(i32 97)
  call void @putch(i32 114)
  call void @putch(i32 114)
  call void @putch(i32 97)
  call void @putch(i32 121)
  call void @putch(i32 95)
  call void @putch(i32 99)
  call void @putch(i32 91)
  call void @putch(i32 48)
  call void @putch(i32 93)
  call void @putch(i32 32)
  call void @putch(i32 105)
  call void @putch(i32 115)
  call void @putch(i32 58)
  call void @putint(i32 %var114)
  call void @putch(i32 10)
  %var115 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* @array_d, i32 0, i32 0, i32 0
  %var116 = load i32, i32* %var115
  call void @putch(i32 97)
  call void @putch(i32 114)
  call void @putch(i32 114)
  call void @putch(i32 97)
  call void @putch(i32 121)
  call void @putch(i32 95)
  call void @putch(i32 100)
  call void @putch(i32 91)
  call void @putch(i32 48)
  call void @putch(i32 93)
  call void @putch(i32 91)
  call void @putch(i32 48)
  call void @putch(i32 93)
  call void @putch(i32 32)
  call void @putch(i32 105)
  call void @putch(i32 115)
  call void @putch(i32 58)
  call void @putint(i32 %var116)
  call void @putch(i32 10)
  %var117 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* @array_d, i32 0, i32 1, i32 0
  %var118 = load i32, i32* %var117
  call void @putch(i32 97)
  call void @putch(i32 114)
  call void @putch(i32 114)
  call void @putch(i32 97)
  call void @putch(i32 121)
  call void @putch(i32 95)
  call void @putch(i32 100)
  call void @putch(i32 91)
  call void @putch(i32 49)
  call void @putch(i32 93)
  call void @putch(i32 91)
  call void @putch(i32 48)
  call void @putch(i32 93)
  call void @putch(i32 32)
  call void @putch(i32 105)
  call void @putch(i32 115)
  call void @putch(i32 58)
  call void @putint(i32 %var118)
  call void @putch(i32 10)
  call void @_func1()
  %var119 = alloca i32
  store i32 2, i32* %var119
  %var120 = alloca i32
  br label %var123
  br label %var123
var123:
  %var125 = load i32, i32* %var119
  %var126 = load i32, i32* %var109
  %var127 = icmp slt i32 %var125, %var126
  br i1 %var127, label %var121, label %var122
  br label %var121
var121:
  %var128 = load i32, i32* %var109
  %var129 = load i32, i32* %var119
  %var130 = sdiv i32 %var128, %var129
  %var131 = mul i32 %var130, %var129
  %var132 = sub i32 %var128, %var131
  store i32 %var132, i32* %var120
  %var135 = load i32, i32* %var120
  %var136 = icmp eq i32 %var135, 0
  br i1 %var136, label %var133, label %var134
  br label %var133
var133:
  %var137 = load i32, i32* %var109
  %var138 = load i32, i32* %var119
  %var139 = sdiv i32 %var137, %var138
  store i32 %var139, i32* %var109
  %var140 = load i32, i32* %var119
  call void @putint(i32 %var140)
  call void @putch(i32 32)
  br label %var141
  br label %var134
var134:
  %var142 = load i32, i32* %var119
  %var143 = add i32 %var142, 1
  store i32 %var143, i32* %var119
  br label %var141
var141:
  br label %var124
  br label %var124
var124:
  br label %var123
  br label %var122
var122:
  %var144 = load i32, i32* %var109
  call void @putint(i32 %var144)
  call void @putch(i32 10)
  call void @putch(i32 79)
  call void @putch(i32 118)
  call void @putch(i32 101)
  call void @putch(i32 114)
  ret i32 0
}

