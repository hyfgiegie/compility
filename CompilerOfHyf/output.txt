CONSTTK const
INTTK int
IDENFR const_num0
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR const_num1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR const_num2
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR const_arr0
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR const_arr1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
COMMA ,
LBRACE {
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
INTTK int
IDENFR var0
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR var1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR var2
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR var_arr0
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
<VarDef>
COMMA ,
IDENFR var_arr1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
COMMA ,
LBRACE {
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
RBRACE }
<InitVal>
<VarDef>
COMMA ,
IDENFR var_arr2
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
COMMA ,
IDENFR var_arr3
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
SEMICN ;
<VarDecl>
VOIDTK void
<FuncType>
IDENFR func0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR func2
LPARENT (
INTTK int
IDENFR n
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR func3
LPARENT (
INTTK int
IDENFR n
<FuncFParam>
COMMA ,
INTTK int
IDENFR m
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
IDENFR m
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR func4
LPARENT (
INTTK int
IDENFR n
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR m
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
ASSIGN =
MINU -
<UnaryOp>
PLUS +
<UnaryOp>
MINU -
<UnaryOp>
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IDENFR var0
<LVal>
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
LPARENT (
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD %
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 14
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 22
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 21
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 22
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
SEMICN ;
<Stmt>
LBRACE {
RBRACE }
<Block>
<Stmt>
LBRACE {
INTTK int
IDENFR n
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
RBRACE }
<Block>
<Stmt>
IFTK if
LPARENT (
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GRE >
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND &&
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LEQ <=
INTCON 100
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND &&
IDENFR func1
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND &&
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND &&
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
IDENFR n
<LVal>
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GEQ >=
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR ||
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 100
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR ||
IDENFR func1
LPARENT (
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR ||
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR ||
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ !=
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
IDENFR n
<LVal>
ASSIGN =
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
ELSETK else
IDENFR n
<LVal>
ASSIGN =
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
<Stmt>
IFTK if
LPARENT (
NOT !
<UnaryOp>
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "hello\n"
RPARENT )
SEMICN ;
<Stmt>
<Stmt>
INTTK int
IDENFR i
<VarDef>
SEMICN ;
<VarDecl>
FORTK for
LPARENT (
IDENFR i
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
IDENFR i
<LVal>
ASSIGN =
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
IDENFR n
<LVal>
ASSIGN =
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR i
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
IDENFR i
<LVal>
ASSIGN =
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
BREAKTK break
SEMICN ;
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR i
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
IDENFR i
<LVal>
ASSIGN =
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
IFTK if
LPARENT (
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
CONTINUETK continue
SEMICN ;
<Stmt>
ELSETK else
IDENFR n
<LVal>
ASSIGN =
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
<Stmt>
<Stmt>
INTTK int
IDENFR j
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
FORTK for
LPARENT (
SEMICN ;
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
IDENFR j
<LVal>
ASSIGN =
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
LBRACE {
IDENFR n
<LVal>
ASSIGN =
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IDENFR j
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
FORTK for
LPARENT (
SEMICN ;
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
<LVal>
ASSIGN =
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR j
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
SEMICN ;
IDENFR j
<LVal>
ASSIGN =
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GRE >
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
BREAKTK break
SEMICN ;
<Stmt>
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
BREAKTK break
SEMICN ;
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR j
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS <
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
RPARENT )
BREAKTK break
SEMICN ;
<Stmt>
<Stmt>
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR j
<LVal>
ASSIGN =
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
BREAKTK break
SEMICN ;
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR j
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
SEMICN ;
RPARENT )
BREAKTK break
SEMICN ;
<Stmt>
<Stmt>
FORTK for
LPARENT (
IDENFR j
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ;
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ !=
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ;
IDENFR j
<LVal>
ASSIGN =
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT )
SEMICN ;
<Stmt>
<Stmt>
IDENFR n
<LVal>
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "111\n"
RPARENT )
SEMICN ;
<Stmt>
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
MINU -
<UnaryOp>
IDENFR func2
LPARENT (
IDENFR n
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PLUS +
<UnaryOp>
IDENFR func3
LPARENT (
IDENFR const_num0
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR func4
LPARENT (
IDENFR var_arr0
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR var_arr1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR func4
LPARENT (
IDENFR var_arr0
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR var_arr1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR func4
LPARENT (
IDENFR var_arr1
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR var_arr1
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
MINU -
<UnaryOp>
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
PLUS +
<UnaryOp>
INTCON 55
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR var0
<LVal>
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR var_arr0
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
ASSIGN =
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR var_arr1
LBRACK [
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
LBRACK [
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
ASSIGN =
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<MainFuncDef>
<CompUnit>
