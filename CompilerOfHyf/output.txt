CONSTTK const 5
INTTK int 5
IDENFR const_num0 5
ASSIGN = 5
INTCON 0 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ; 5
<ConstDecl>
CONSTTK const 6
INTTK int 6
IDENFR const_num1 6
ASSIGN = 6
INTCON 1 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA , 6
IDENFR const_num2 6
ASSIGN = 6
INTCON 2 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV / 6
INTCON 2 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 6
INTCON 1 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ; 6
<ConstDecl>
CONSTTK const 7
INTTK int 7
IDENFR const_arr0 7
LBRACK [ 7
INTCON 2 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 7
ASSIGN = 7
LBRACE { 7
INTCON 0 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA , 7
INTCON 1 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 7
<ConstInitVal>
<ConstDef>
SEMICN ; 7
<ConstDecl>
CONSTTK const 8
INTTK int 8
IDENFR const_arr1 8
LBRACK [ 8
INTCON 2 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 8
LBRACK [ 8
INTCON 2 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 8
ASSIGN = 8
LBRACE { 8
LBRACE { 8
INTCON 2 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA , 8
INTCON 3 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 8
<ConstInitVal>
COMMA , 8
LBRACE { 8
INTCON 4 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA , 8
INTCON 5 8
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE } 8
<ConstInitVal>
RBRACE } 8
<ConstInitVal>
<ConstDef>
SEMICN ; 8
<ConstDecl>
INTTK int 9
IDENFR var0 9
<VarDef>
SEMICN ; 9
<VarDecl>
INTTK int 10
IDENFR var1 10
ASSIGN = 10
INTCON 1 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA , 10
IDENFR var2 10
ASSIGN = 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA , 10
IDENFR var_arr0 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
ASSIGN = 10
LBRACE { 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 10
<InitVal>
<VarDef>
COMMA , 10
IDENFR var_arr1 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
ASSIGN = 10
LBRACE { 10
LBRACE { 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 10
<InitVal>
COMMA , 10
LBRACE { 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA , 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE } 10
<InitVal>
RBRACE } 10
<InitVal>
<VarDef>
COMMA , 10
IDENFR var_arr2 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
<VarDef>
COMMA , 10
IDENFR var_arr3 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
LBRACK [ 10
INTCON 2 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 10
<VarDef>
SEMICN ; 10
<VarDecl>
VOIDTK void 12
<FuncType>
IDENFR func0 12
LPARENT ( 12
RPARENT ) 12
LBRACE { 12
RETURNTK return 13
SEMICN ; 13
<Stmt>
RBRACE } 14
<Block>
<FuncDef>
INTTK int 16
<FuncType>
IDENFR func1 16
LPARENT ( 16
RPARENT ) 16
LBRACE { 16
RETURNTK return 17
INTCON 0 17
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 17
<Stmt>
RBRACE } 18
<Block>
<FuncDef>
INTTK int 20
<FuncType>
IDENFR func2 20
LPARENT ( 20
INTTK int 20
IDENFR n 20
<FuncFParam>
<FuncFParams>
RPARENT ) 20
LBRACE { 20
RETURNTK return 21
IDENFR n 21
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 21
<Stmt>
RBRACE } 22
<Block>
<FuncDef>
INTTK int 24
<FuncType>
IDENFR func3 24
LPARENT ( 24
INTTK int 24
IDENFR n 24
<FuncFParam>
COMMA , 24
INTTK int 24
IDENFR m 24
<FuncFParam>
<FuncFParams>
RPARENT ) 24
LBRACE { 24
RETURNTK return 25
IDENFR m 25
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 25
<Stmt>
RBRACE } 26
<Block>
<FuncDef>
INTTK int 28
<FuncType>
IDENFR func4 28
LPARENT ( 28
INTTK int 28
IDENFR n 28
LBRACK [ 28
RBRACK ] 28
<FuncFParam>
COMMA , 28
INTTK int 28
IDENFR m 28
LBRACK [ 28
RBRACK ] 28
LBRACK [ 28
INTCON 2 28
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ] 28
<FuncFParam>
<FuncFParams>
RPARENT ) 28
LBRACE { 28
RETURNTK return 29
INTCON 0 29
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 29
<Stmt>
RBRACE } 30
<Block>
<FuncDef>
INTTK int 32
MAINTK main 32
LPARENT ( 32
RPARENT ) 32
LBRACE { 32
INTTK int 33
IDENFR n 33
ASSIGN = 33
MINU - 33
<UnaryOp>
PLUS + 33
<UnaryOp>
MINU - 33
<UnaryOp>
INTCON 1 33
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 33
<VarDecl>
IDENFR var0 34
<LVal>
ASSIGN = 34
INTCON 1 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 34
LPARENT ( 34
INTCON 2 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 34
INTCON 3 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 34
INTCON 2 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 34
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 34
LPARENT ( 34
INTCON 4 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MOD % 34
INTCON 2 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 34
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 34
INTCON 14 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV / 34
INTCON 2 34
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 34
<Stmt>
INTCON 3 35
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 35
INTCON 22 35
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 35
INTCON 21 35
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 35
INTCON 3 35
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 35
INTCON 22 35
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 35
<Stmt>
SEMICN ; 36
<Stmt>
LBRACE { 37
RBRACE } 37
<Block>
<Stmt>
LBRACE { 38
INTTK int 39
IDENFR n 39
ASSIGN = 39
INTCON 2 39
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT * 39
INTCON 3 39
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 39
<VarDecl>
RBRACE } 40
<Block>
<Stmt>
IFTK if 41
LPARENT ( 41
IDENFR n 41
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GRE > 41
INTCON 0 41
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 41
IDENFR n 41
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LEQ <= 41
INTCON 100 41
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 41
IDENFR func1 41
LPARENT ( 41
RPARENT ) 41
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 41
INTCON 0 41
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
AND && 41
IDENFR n 41
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL == 41
INTCON 1 41
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 41
IDENFR n 41
<LVal>
ASSIGN = 41
INTCON 2 41
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 41
<Stmt>
<Stmt>
IFTK if 42
LPARENT ( 42
IDENFR n 42
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GEQ >= 42
INTCON 1 42
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR || 42
IDENFR n 42
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 42
INTCON 100 42
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR || 42
IDENFR func1 42
LPARENT ( 42
RPARENT ) 42
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR || 42
INTCON 1 42
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
OR || 42
IDENFR n 42
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ != 42
INTCON 1 42
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 42
IDENFR n 42
<LVal>
ASSIGN = 42
INTCON 3 42
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 42
<Stmt>
ELSETK else 42
IDENFR n 42
<LVal>
ASSIGN = 42
INTCON 4 42
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 42
<Stmt>
<Stmt>
IFTK if 43
LPARENT ( 43
NOT ! 43
<UnaryOp>
INTCON 0 43
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 43
PRINTFTK printf 43
LPARENT ( 43
STRCON "hello\n" 43
RPARENT ) 43
SEMICN ; 43
<Stmt>
<Stmt>
INTTK int 44
IDENFR i 44
<VarDef>
SEMICN ; 44
<VarDecl>
FORTK for 45
LPARENT ( 45
IDENFR i 45
<LVal>
ASSIGN = 45
INTCON 0 45
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ; 45
IDENFR i 45
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 45
INTCON 2 45
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ; 45
IDENFR i 45
<LVal>
ASSIGN = 45
IDENFR i 45
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 45
INTCON 1 45
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT ) 45
IDENFR n 45
<LVal>
ASSIGN = 45
IDENFR n 45
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU - 45
INTCON 1 45
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 45
<Stmt>
<Stmt>
FORTK for 46
LPARENT ( 46
IDENFR i 46
<LVal>
ASSIGN = 46
INTCON 0 46
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ; 46
IDENFR i 46
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 46
INTCON 1 46
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ; 46
IDENFR i 46
<LVal>
ASSIGN = 46
IDENFR i 46
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 46
INTCON 1 46
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT ) 46
BREAKTK break 46
SEMICN ; 46
<Stmt>
<Stmt>
FORTK for 47
LPARENT ( 47
IDENFR i 47
<LVal>
ASSIGN = 47
INTCON 0 47
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ; 47
IDENFR i 47
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 47
INTCON 2 47
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ; 47
IDENFR i 47
<LVal>
ASSIGN = 47
IDENFR i 47
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 47
INTCON 1 47
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT ) 47
IFTK if 47
LPARENT ( 47
IDENFR i 47
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 47
INTCON 2 47
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 47
CONTINUETK continue 47
SEMICN ; 47
<Stmt>
ELSETK else 47
IDENFR n 47
<LVal>
ASSIGN = 47
IDENFR n 47
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 47
INTCON 1 47
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 47
<Stmt>
<Stmt>
<Stmt>
INTTK int 48
IDENFR j 48
ASSIGN = 48
INTCON 0 48
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ; 48
<VarDecl>
FORTK for 49
LPARENT ( 49
SEMICN ; 49
IDENFR j 49
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 49
INTCON 2 49
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ; 49
IDENFR j 49
<LVal>
ASSIGN = 49
IDENFR j 49
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 49
INTCON 1 49
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT ) 49
LBRACE { 49
IDENFR n 50
<LVal>
ASSIGN = 50
IDENFR n 50
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 50
INTCON 1 50
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 50
<Stmt>
RBRACE } 51
<Block>
<Stmt>
<Stmt>
IDENFR j 52
<LVal>
ASSIGN = 52
INTCON 0 52
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 52
<Stmt>
FORTK for 53
LPARENT ( 53
SEMICN ; 53
IDENFR j 53
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 53
INTCON 1 53
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ; 53
RPARENT ) 53
LBRACE { 53
IDENFR j 54
<LVal>
ASSIGN = 54
IDENFR j 54
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 54
INTCON 1 54
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 54
<Stmt>
RBRACE } 55
<Block>
<Stmt>
<Stmt>
FORTK for 56
LPARENT ( 56
IDENFR j 56
<LVal>
ASSIGN = 56
INTCON 0 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ; 56
SEMICN ; 56
IDENFR j 56
<LVal>
ASSIGN = 56
IDENFR j 56
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 56
INTCON 1 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT ) 56
LBRACE { 56
IFTK if 57
LPARENT ( 57
IDENFR j 57
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
GRE > 57
INTCON 1 57
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT ) 57
BREAKTK break 57
SEMICN ; 57
<Stmt>
<Stmt>
RBRACE } 58
<Block>
<Stmt>
<Stmt>
FORTK for 59
LPARENT ( 59
SEMICN ; 59
SEMICN ; 59
RPARENT ) 59
BREAKTK break 59
SEMICN ; 59
<Stmt>
<Stmt>
FORTK for 60
LPARENT ( 60
IDENFR j 60
<LVal>
ASSIGN = 60
INTCON 0 60
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ; 60
IDENFR j 60
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
LSS < 60
INTCON 1 60
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ; 60
RPARENT ) 60
BREAKTK break 60
SEMICN ; 60
<Stmt>
<Stmt>
FORTK for 61
LPARENT ( 61
SEMICN ; 61
SEMICN ; 61
IDENFR j 61
<LVal>
ASSIGN = 61
IDENFR j 61
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 61
INTCON 1 61
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT ) 61
BREAKTK break 61
SEMICN ; 61
<Stmt>
<Stmt>
FORTK for 62
LPARENT ( 62
IDENFR j 62
<LVal>
ASSIGN = 62
INTCON 0 62
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ; 62
SEMICN ; 62
RPARENT ) 62
BREAKTK break 62
SEMICN ; 62
<Stmt>
<Stmt>
FORTK for 63
LPARENT ( 63
IDENFR j 63
<LVal>
ASSIGN = 63
INTCON 0 63
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
SEMICN ; 63
IDENFR j 63
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
NEQ != 63
INTCON 0 63
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
SEMICN ; 63
IDENFR j 63
<LVal>
ASSIGN = 63
IDENFR j 63
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS + 63
INTCON 1 63
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<ForStmt>
RPARENT ) 63
SEMICN ; 63
<Stmt>
<Stmt>
IDENFR n 65
<LVal>
ASSIGN = 65
GETINTTK getint 65
LPARENT ( 65
RPARENT ) 65
SEMICN ; 65
<Stmt>
PRINTFTK printf 66
LPARENT ( 66
STRCON "111\n" 66
RPARENT ) 66
SEMICN ; 66
<Stmt>
PRINTFTK printf 67
LPARENT ( 67
STRCON "%d" 67
COMMA , 67
IDENFR n 67
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT ) 67
SEMICN ; 67
<Stmt>
MINU - 68
<UnaryOp>
IDENFR func2 68
LPARENT ( 68
IDENFR n 68
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 68
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 68
<Stmt>
PLUS + 69
<UnaryOp>
IDENFR func3 69
LPARENT ( 69
IDENFR const_num0 69
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 69
INTCON 1 69
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 69
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 69
<Stmt>
IDENFR func4 70
LPARENT ( 70
IDENFR var_arr0 70
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 70
IDENFR var_arr1 70
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 70
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 70
<Stmt>
IDENFR func4 71
LPARENT ( 71
IDENFR var_arr0 71
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 71
IDENFR var_arr1 71
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 71
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 71
<Stmt>
IDENFR func4 72
LPARENT ( 72
IDENFR var_arr1 72
LBRACK [ 72
INTCON 0 72
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 72
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA , 72
IDENFR var_arr1 72
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT ) 72
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 72
<Stmt>
MINU - 73
<UnaryOp>
INTCON 3 73
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 73
<Stmt>
PLUS + 74
<UnaryOp>
INTCON 55 74
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 74
<Stmt>
IDENFR var0 75
<LVal>
ASSIGN = 75
INTCON 0 75
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 75
<Stmt>
IDENFR var_arr0 76
LBRACK [ 76
INTCON 0 76
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 76
<LVal>
ASSIGN = 76
INTCON 3 76
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 76
<Stmt>
IDENFR var_arr1 77
LBRACK [ 77
INTCON 0 77
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 77
LBRACK [ 77
INTCON 1 77
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ] 77
<LVal>
ASSIGN = 77
INTCON 5 77
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 77
<Stmt>
RETURNTK return 78
INTCON 0 78
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ; 78
<Stmt>
RBRACE } 79
<Block>
<MainFuncDef>
<CompUnit>
